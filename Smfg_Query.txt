1st Query:-
===========

SELECT "callcenter_diallereventlog"."id", "callcenter_diallereventlog"."site_id", "callcenter_diallereventlog"."campaign_id", "callcenter_diallereventlog"."campaign_name", "callcenter_diallereventlog"."user_id", "callcenter_diallereventlog"."phonebook", "callcenter_diallereventlog"."contact_id", "callcenter_diallereventlog"."session_uuid", "callcenter_diallereventlog"."a_leg_uuid", "callcenter_diallereventlog"."b_leg_uuid", "callcenter_diallereventlog"."init_time", "callcenter_diallereventlog"."ring_time", "callcenter_diallereventlog"."ring_duration", "callcenter_diallereventlog"."connect_time", "callcenter_diallereventlog"."wait_time", "callcenter_diallereventlog"."hold_time", "callcenter_diallereventlog"."media_time", "callcenter_diallereventlog"."callflow", "callcenter_diallereventlog"."callmode", "callcenter_diallereventlog"."customer_cid", "callcenter_diallereventlog"."destination_extension", "callcenter_diallereventlog"."transfer_history", "callcenter_diallereventlog"."call_duration", "callcenter_diallereventlog"."bill_sec", "callcenter_diallereventlog"."ivr_duration", "callcenter_diallereventlog"."hangup_time", "callcenter_diallereventlog"."dialed_status", "callcenter_diallereventlog"."hangup_cause", "callcenter_diallereventlog"."hangup_cause_code", "callcenter_diallereventlog"."channel", "callcenter_diallereventlog"."info", "callcenter_diallereventlog"."uniqueid", "callcenter_diallereventlog"."created", "callcenter_diallereventlog"."updated" FROM "callcenter_diallereventlog" WHERE (("callcenter_diallereventlog"."created")::date = '2025-01-17'::date AND "callcenter_diallereventlog"."created" < '2025-01-17T09:50:53.922462'::timestamp AND NOT ("callcenter_diallereventlog"."session_uuid" IN (SELECT U0."session_uuid" FROM "callcenter_calldetail" U0 WHERE ((U0."created")::date = '2025-01-17'::date AND U0."created" < '2025-01-17T09:50:53.922462'::timestamp AND NOT (U0."session_uuid" IS NULL))) AND "callcenter_diallereventlog"."session_uuid" IS NOT NULL)) ORDER BY "callcenter_diallereventlog"."init_time" DESC

2nd Query:-
===========

SELECT COUNT(*) AS "__count" FROM "callcenter_calldetail" WHERE ("callcenter_calldetail"."campaign_name" = 'Telugu' AND "callcenter_calldetail"."dialed_status" = 'Connected' AND ("callcenter_calldetail"."updated")::date = '2025-01-17'::date)

3rd Query:-
===========

SELECT COUNT(*) AS "__count" FROM "callcenter_calldetail" INNER JOIN "callcenter_cdrfeedbck" ON ("callcenter_calldetail"."id" = "callcenter_cdrfeedbck"."calldetail_id") WHERE (EXTRACT('month' FROM "callcenter_calldetail"."created") = 1 AND "callcenter_calldetail"."user_id" = 88 AND NOT ("callcenter_cdrfeedbck"."id" IS NULL))

4th Query:-
===========

SELECT COUNT("callcenter_calldetail"."id") FILTER (WHERE ("callcenter_calldetail"."created" >= '2025-01-17T00:00:00'::timestamp AND "callcenter_calldetail"."created" <= '2025-01-18T00:00:00'::timestamp)) AS "total_agentcalls_today", COUNT("callcenter_calldetail"."id") FILTER (WHERE EXTRACT('month' FROM "callcenter_calldetail"."created") = 1) AS "total_agentcalls_month" FROM "callcenter_calldetail" INNER JOIN "callcenter_cdrfeedbck" ON ("callcenter_calldetail"."id" = "callcenter_cdrfeedbck"."calldetail_id") WHERE ("callcenter_calldetail"."user_id" = 284 AND NOT ("callcenter_cdrfeedbck"."id" IS NULL))

5th Query:-
===========

SELECT callcenter_calldetail.campaign_name as campaign_name , usr.username as user , CONCAT(usr.first_name, ' ' ,usr.last_name) as full_name , callcenter_calldetail.phonebook as phonebook , callcenter_calldetail.customer_cid as customer_cid , callcenter_calldetail.contact_id as contact_id , callcenter_calldetail.uniqueid as lan , callcenter_calldetail.session_uuid as session_uuid , date_trunc('second', CASE WHEN callcenter_diallereventlog.init_time IS NULL THEN callcenter_calldetail.init_time ELSE callcenter_diallereventlog.init_time END at time zone 'Asia/Kolkata') as init_time , date_trunc('second', CASE WHEN callcenter_diallereventlog.ring_time IS NULL THEN callcenter_calldetail.ring_time ELSE callcenter_diallereventlog.ring_time END at time zone 'Asia/Kolkata') as ring_time , date_trunc('second', CASE WHEN callcenter_diallereventlog.connect_time IS NULL THEN callcenter_calldetail.connect_time ELSE callcenter_diallereventlog.connect_time END at time zone 'Asia/Kolkata') as connect_time , date_trunc('second', CASE WHEN callcenter_diallereventlog.hangup_time IS NULL THEN callcenter_calldetail.hangup_time ELSE callcenter_diallereventlog.hangup_time END at time zone 'Asia/Kolkata') as hangup_time , CASE WHEN callcenter_diallereventlog.wait_time IS NULL THEN callcenter_calldetail.wait_time ELSE callcenter_diallereventlog.wait_time END as wait_time , CASE WHEN callcenter_diallereventlog.ring_duration IS NULL THEN callcenter_calldetail.ring_duration ELSE callcenter_diallereventlog.ring_duration END as ring_duration , CASE WHEN callcenter_diallereventlog.hold_time IS NULL THEN callcenter_calldetail.hold_time ELSE callcenter_diallereventlog.hold_time END as hold_time , callcenter_calldetail.callflow as callflow , callcenter_calldetail.callmode as callmode , CASE WHEN callcenter_diallereventlog.bill_sec IS NULL THEN callcenter_calldetail.bill_sec ELSE callcenter_diallereventlog.bill_sec END as talk_time , CASE WHEN callcenter_diallereventlog.ivr_duration IS NULL THEN callcenter_calldetail.ivr_duration ELSE callcenter_diallereventlog.ivr_duration END as ivr_duration , CASE WHEN callcenter_diallereventlog.call_duration IS NULL THEN callcenter_calldetail.call_duration ELSE callcenter_diallereventlog.call_duration END as call_duration , callcenter_calldetail.feedback_time as wrapup_time , cast(CASE WHEN callcenter_diallereventlog.call_duration IS NULL THEN callcenter_calldetail.call_duration::interval + feedback_time::interval ELSE callcenter_diallereventlog.call_duration::interval + feedback_time::interval END as text) as call_length , callcenter_calldetail.hangup_source as hangup_source , callcenter_calldetail.internal_tc_number as internal_tc_number , callcenter_calldetail.external_tc_number as external_tc_number , callcenter_calldetail.progressive_time as progressive_time , callcenter_calldetail.preview_time as preview_time , callcenter_calldetail.predictive_wait_time as predictive_wait_time , callcenter_calldetail.inbound_wait_time as inbound_wait_time , callcenter_calldetail.blended_wait_time as blended_wait_time , CASE WHEN callcenter_diallereventlog.hangup_cause IS NULL THEN callcenter_calldetail.hangup_cause ELSE callcenter_diallereventlog.hangup_cause END as hangup_cause , CASE WHEN callcenter_diallereventlog.hangup_cause_code IS NULL THEN callcenter_calldetail.hangup_cause_code ELSE callcenter_diallereventlog.hangup_cause_code END as hangup_cause_code , CASE WHEN callcenter_diallereventlog.dialed_status IS NULL THEN callcenter_calldetail.dialed_status ELSE callcenter_diallereventlog.dialed_status END as dialed_status , callcenter_cdrfeedbck.primary_dispo as primary_dispo , callcenter_cdrfeedbck.feedback ->> 'next_action_code' as "next_action_code" , callcenter_cdrfeedbck.feedback ->> 'pu_date' as "pu_date" , callcenter_cdrfeedbck.feedback ->> 'pu_amount' as "pu_amount" , callcenter_cdrfeedbck.feedback ->> 'rfd' as "rfd" , callcenter_cdrfeedbck.feedback ->> 'next_action_date_time' as "next_action_date_time" , callcenter_cdrfeedbck.feedback ->> 'action_code' as "action_code" , callcenter_cdrfeedbck.feedback ->> 'on_or_before_ptp_date' as "on_or_before_ptp_date" , callcenter_cdrfeedbck.feedback ->> 'follow_up' as "follow_up" , callcenter_cdrfeedbck.feedback ->> 'ptp_date' as "ptp_date" , callcenter_cdrfeedbck.feedback ->> 'ptp/pu_date' as "ptp/pu_date" , callcenter_cdrfeedbck.feedback ->> 'ptp_amount' as "ptp_amount" , CASE WHEN sms.name IS NULL THEN 'No' WHEN sms.name IS NOT NULL THEN 'Yes' END as sms_sent , sms.name as sms_message , callcenter_cdrfeedbck.comment as comment from callcenter_calldetail left join callcenter_diallereventlog on callcenter_diallereventlog.session_uuid = callcenter_calldetail.session_uuid left join callcenter_cdrfeedbck on callcenter_cdrfeedbck.calldetail_id=callcenter_calldetail.id left join callcenter_user usr on usr.id = callcenter_calldetail.user_id left join callcenter_user supr on supr.id = usr.reporting_to_id left join (select sms.session_uuid as session_uuid, string_agg(template.name, ', ') as name from callcenter_smslog sms left join callcenter_smstemplate template on sms.template_id = template.id group by sms.session_uuid) sms on sms.session_uuid = callcenter_calldetail.session_uuid  WHERE ( callcenter_calldetail.created at time zone 'Asia/Kolkata' >= '2025-01-16T08:00:00' and callcenter_calldetail.created at time zone 'Asia/Kolkata' <= '2025-01-16T19:00:00') and  (callcenter_calldetail.campaign_name IN ('HFC_Adhoc', 'SOUTH_HFC', 'HFC_Cloud', 'Mumbai_HFC') )  order by callcenter_calldetail.created desc

6th Query:-
===========

SELECT "callcenter_calldetail"."id", "callcenter_calldetail"."site_id", "callcenter_calldetail"."campaign_id", "callcenter_calldetail"."campaign_name", "callcenter_calldetail"."user_id", "callcenter_calldetail"."phonebook", "callcenter_calldetail"."contact_id", "callcenter_calldetail"."customer_cid", "callcenter_calldetail"."callflow", "callcenter_calldetail"."callmode", "callcenter_calldetail"."destination_extension", "callcenter_calldetail"."dialed_status", "callcenter_calldetail"."session_uuid", "callcenter_calldetail"."a_leg_uuid", "callcenter_calldetail"."b_leg_uuid", "callcenter_calldetail"."predictive_time", "callcenter_calldetail"."progressive_time", "callcenter_calldetail"."preview_time", "callcenter_calldetail"."init_time", "callcenter_calldetail"."ring_time", "callcenter_calldetail"."ring_duration", "callcenter_calldetail"."connect_time", "callcenter_calldetail"."wait_time", "callcenter_calldetail"."predictive_wait_time", "callcenter_calldetail"."hold_time", "callcenter_calldetail"."media_time", "callcenter_calldetail"."bill_sec", "callcenter_calldetail"."ivr_duration", "callcenter_calldetail"."call_duration", "callcenter_calldetail"."feedback_time", "callcenter_calldetail"."cfc_number", "callcenter_calldetail"."internal_tc_number", "callcenter_calldetail"."external_tc_number", "callcenter_calldetail"."hangup_time", "callcenter_calldetail"."hangup_source", "callcenter_calldetail"."hangup_cause", "callcenter_calldetail"."hangup_cause_code", "callcenter_calldetail"."inbound_time", "callcenter_calldetail"."inbound_wait_time", "callcenter_calldetail"."blended_time", "callcenter_calldetail"."blended_wait_time", "callcenter_calldetail"."uniqueid", "callcenter_calldetail"."created", "callcenter_calldetail"."updated" FROM "callcenter_calldetail" INNER JOIN "callcenter_cdrfeedbck" ON ("callcenter_calldetail"."id" = "callcenter_cdrfeedbck"."calldetail_id") WHERE (("callcenter_calldetail"."created")::date = '2025-01-17'::date AND "callcenter_calldetail"."user_id" = 437 AND NOT ("callcenter_cdrfeedbck"."id" IS NULL)) ORDER BY "callcenter_calldetail"."created" DESC  LIMIT 2

7th Query:-
===========

select user_id,event,min(created) as event_min_time,max(created) as event_max_time,campaign_name,count(user_id) as activity_count,
                        sum(break_time) as break_time,sum(pause_progressive_time) as pause_progressive_time,
                        sum(predictive_time) as predictive_time,sum(progressive_time) as progressive_time,
                        sum(preview_time) as preview_time,sum(predictive_wait_time) as predictive_wait_time,
                        sum(inbound_time) as inbound_time,sum(blended_time) as blended_time,
                        sum(inbound_wait_time) as inbound_wait_time,sum(blended_wait_time) as blended_wait_time,
                        sum(idle_time) as app_idle_time from callcenter_agentactivity 
                        where created > '2025-01-16 00:00:00' and created < '2025-01-16 22:10' 
                        group by user_id,event,campaign_name

8th Query:-
===========

SELECT callcenter_calldetail.campaign_name as campaign_name , usr.username as user , CONCAT(usr.first_name, ' ' ,usr.last_name) as full_name , callcenter_calldetail.phonebook as phonebook , callcenter_calldetail.customer_cid as customer_cid , callcenter_calldetail.contact_id as contact_id , callcenter_calldetail.uniqueid as lan , callcenter_calldetail.session_uuid as session_uuid , date_trunc('second', CASE WHEN callcenter_diallereventlog.init_time IS NULL THEN callcenter_calldetail.init_time ELSE callcenter_diallereventlog.init_time END at time zone 'Asia/Kolkata') as init_time , date_trunc('second', CASE WHEN callcenter_diallereventlog.ring_time IS NULL THEN callcenter_calldetail.ring_time ELSE callcenter_diallereventlog.ring_time END at time zone 'Asia/Kolkata') as ring_time , date_trunc('second', CASE WHEN callcenter_diallereventlog.connect_time IS NULL THEN callcenter_calldetail.connect_time ELSE callcenter_diallereventlog.connect_time END at time zone 'Asia/Kolkata') as connect_time , date_trunc('second', CASE WHEN callcenter_diallereventlog.hangup_time IS NULL THEN callcenter_calldetail.hangup_time ELSE callcenter_diallereventlog.hangup_time END at time zone 'Asia/Kolkata') as hangup_time , CASE WHEN callcenter_diallereventlog.wait_time IS NULL THEN callcenter_calldetail.wait_time ELSE callcenter_diallereventlog.wait_time END as wait_time , CASE WHEN callcenter_diallereventlog.ring_duration IS NULL THEN callcenter_calldetail.ring_duration ELSE callcenter_diallereventlog.ring_duration END as ring_duration , CASE WHEN callcenter_diallereventlog.hold_time IS NULL THEN callcenter_calldetail.hold_time ELSE callcenter_diallereventlog.hold_time END as hold_time , callcenter_calldetail.callflow as callflow , callcenter_calldetail.callmode as callmode , CASE WHEN callcenter_diallereventlog.bill_sec IS NULL THEN callcenter_calldetail.bill_sec ELSE callcenter_diallereventlog.bill_sec END as talk_time , CASE WHEN callcenter_diallereventlog.ivr_duration IS NULL THEN callcenter_calldetail.ivr_duration ELSE callcenter_diallereventlog.ivr_duration END as ivr_duration , CASE WHEN callcenter_diallereventlog.call_duration IS NULL THEN callcenter_calldetail.call_duration ELSE callcenter_diallereventlog.call_duration END as call_duration , callcenter_calldetail.feedback_time as wrapup_time , cast(CASE WHEN callcenter_diallereventlog.call_duration IS NULL THEN callcenter_calldetail.call_duration::interval + feedback_time::interval ELSE callcenter_diallereventlog.call_duration::interval + feedback_time::interval END as text) as call_length , callcenter_calldetail.hangup_source as hangup_source , callcenter_calldetail.internal_tc_number as internal_tc_number , callcenter_calldetail.external_tc_number as external_tc_number , callcenter_calldetail.progressive_time as progressive_time , callcenter_calldetail.preview_time as preview_time , callcenter_calldetail.predictive_wait_time as predictive_wait_time , callcenter_calldetail.inbound_wait_time as inbound_wait_time , callcenter_calldetail.blended_wait_time as blended_wait_time , CASE WHEN callcenter_diallereventlog.hangup_cause IS NULL THEN callcenter_calldetail.hangup_cause ELSE callcenter_diallereventlog.hangup_cause END as hangup_cause , CASE WHEN callcenter_diallereventlog.hangup_cause_code IS NULL THEN callcenter_calldetail.hangup_cause_code ELSE callcenter_diallereventlog.hangup_cause_code END as hangup_cause_code , CASE WHEN callcenter_diallereventlog.dialed_status IS NULL THEN callcenter_calldetail.dialed_status ELSE callcenter_diallereventlog.dialed_status END as dialed_status , callcenter_cdrfeedbck.primary_dispo as primary_dispo , callcenter_cdrfeedbck.feedback ->> 'ptp_date' as "ptp_date" , callcenter_cdrfeedbck.feedback ->> 'action_code' as "action_code" , callcenter_cdrfeedbck.feedback ->> 'next_action_date_time' as "next_action_date_time" , callcenter_cdrfeedbck.feedback ->> 'pu_date' as "pu_date" , callcenter_cdrfeedbck.feedback ->> 'next_action_code' as "next_action_code" , callcenter_cdrfeedbck.feedback ->> 'paid_in_cash_to_agent' as "paid_in_cash_to_agent" , callcenter_cdrfeedbck.feedback ->> 'rfd' as "rfd" , callcenter_cdrfeedbck.feedback ->> 'follow_up' as "follow_up" , callcenter_cdrfeedbck.feedback ->> 'pu_amount' as "pu_amount" , callcenter_cdrfeedbck.feedback ->> 'referral_status' as "referral_status" , callcenter_cdrfeedbck.feedback ->> 'paid_in_branch' as "paid_in_branch" , callcenter_cdrfeedbck.feedback ->> 'paid_onlin' as "paid_onlin" , callcenter_cdrfeedbck.feedback ->> 'on_or_before_ptp_date' as "on_or_before_ptp_date" , callcenter_cdrfeedbck.feedback ->> 'ptp/pu_date' as "ptp/pu_date" , callcenter_cdrfeedbck.feedback ->> 'ptp_amount' as "ptp_amount" , CASE WHEN sms.name IS NULL THEN 'No' WHEN sms.name IS NOT NULL THEN 'Yes' END as sms_sent , sms.name as sms_message , callcenter_cdrfeedbck.comment as comment from callcenter_calldetail left join callcenter_diallereventlog on callcenter_diallereventlog.session_uuid = callcenter_calldetail.session_uuid left join callcenter_cdrfeedbck on callcenter_cdrfeedbck.calldetail_id=callcenter_calldetail.id left join callcenter_user usr on usr.id = callcenter_calldetail.user_id left join callcenter_user supr on supr.id = usr.reporting_to_id left join (select sms.session_uuid as session_uuid, string_agg(template.name, ', ') as name from callcenter_smslog sms left join callcenter_smstemplate template on sms.template_id = template.id group by sms.session_uuid) sms on sms.session_uuid = callcenter_calldetail.session_uuid  WHERE ( callcenter_calldetail.created at time zone 'Asia/Kolkata' >= '2025-01-04T00:00:00' and callcenter_calldetail.created at time zone 'Asia/Kolkata' <= '2025-01-16T23:31:00') and  ((callcenter_calldetail.user_id IN ('537', '536', '535', '534', '533', '532', '531', '530', '529', '528', '527', '526', '525', '523', '520', '519', '518', '517', '516', '515', '514', '513', '510', '509', '508', '507', '506', '505', '504', '503', '502', '501', '500', '499', '497', '496', '495', '494', '493', '492', '491', '489', '488', '487', '486', '482', '481', '480', '479', '478', '477', '476', '474', '473', '472', '470', '469', '467', '466', '465', '464', '461', '459', '458', '456', '455', '454', '453', '452', '450', '449', '448', '446', '445', '441', '440', '439', '438', '437', '436', '435', '434', '433', '432', '431', '428', '427', '425', '424', '423', '421', '420', '416', '415', '413', '412', '410', '409', '407', '405', '404', '403', '402', '401', '400', '398', '397', '396', '395', '391', '390', '389', '387', '386', '385', '384', '383', '381', '378', '374', '373', '372', '371', '370', '369', '368', '362', '361', '360', '359', '358', '356', '355', '354', '353', '352', '351', '350', '348', '347', '344', '343', '341', '340', '339', '338', '335', '333', '332', '330', '328', '327', '325', '322', '315', '310', '308', '306', '305', '304', '302', '299', '296', '295', '293', '292', '291', '289', '287', '284', '283', '281', '277', '275', '265', '251', '239', '236', '233', '228', '226', '222', '201', '189', '188', '187', '184', '182', '171', '152', '150', '149', '147', '136', '129', '124', '118', '117', '116', '109', '108', '106', '102', '97', '94', '93', '91', '88', '86', '83', '79', '77', '76', '75', '74', '73', '71', '67', '61', '60', '56', '55', '53', '52', '51', '50', '48', '46', '45', '42', '35', '33', '31', '30', '29', '28', '26', '23', '21', '20', '19', '17', '16', '14', '12', '1')) OR ( callcenter_calldetail.user_id IS NULL )) order by callcenter_calldetail.created desc
